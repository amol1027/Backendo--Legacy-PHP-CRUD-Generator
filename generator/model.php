<?php
/**
 * Backendo: Legacy PHP CRUD Generator
 * Model Generator
 */

// Include required files
require_once '../includes/config.php';
require_once '../includes/functions.php';

/**
 * Generate a model class for a table
 * 
 * @param array $table The table definition
 * @return string The PHP model class code
 */
function generate_model($table) {
    $table_name = sanitize_input($table['name']);
    $class_name = to_singular(to_title_case($table_name));
    $model_code = "<?php\n";
    $model_code .= "/**\n";
    $model_code .= " * {$class_name} Model\n";
    $model_code .= " * Generated by Backendo: Legacy PHP CRUD Generator\n";
    $model_code .= " */\n\n";
    
    // Include database connection
    $model_code .= "require_once 'includes/db.php';\n\n";
    
    // Class definition
    $model_code .= "class {$class_name} {\n";
    
    // Properties
    foreach ($table['fields'] as $field) {
        $field_name = sanitize_input($field['name']);
        $model_code .= "    public \${$field_name};\n";
    }
    
    // Add soft delete property if enabled
    if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
        $model_code .= "    public \$deleted_at;\n";
    }
    
    // Add audit trail properties if enabled
    if (isset($_SESSION['features']['audit']) && $_SESSION['features']['audit']) {
        $model_code .= "    public \$created_at;\n";
        $model_code .= "    public \$updated_at;\n";
        $model_code .= "    public \$created_by;\n";
        $model_code .= "    public \$updated_by;\n";
    }
    
    $model_code .= "\n";
    
    // Constructor
    $model_code .= "    /**\n";
    $model_code .= "     * Constructor\n";
    $model_code .= "     */\n";
    $model_code .= "    public function __construct(\$data = null) {\n";
    $model_code .= "        if (\$data) {\n";
    $model_code .= "            foreach (\$data as \$key => \$value) {\n";
    $model_code .= "                if (property_exists(\$this, \$key)) {\n";
    $model_code .= "                    \$this->\$key = \$value;\n";
    $model_code .= "                }\n";
    $model_code .= "            }\n";
    $model_code .= "        }\n";
    $model_code .= "    }\n\n";
    
    // Find by ID method
    $primary_key = 'id'; // Default primary key
    foreach ($table['fields'] as $field) {
        if (isset($field['constraints']) && in_array('primary', $field['constraints'])) {
            $primary_key = $field['name'];
            break;
        }
    }
    
    $model_code .= "    /**\n";
    $model_code .= "     * Find a record by ID\n";
    $model_code .= "     * \n";
    $model_code .= "     * @param int \$id The record ID\n";
    $model_code .= "     * @return {$class_name}|null The found record or null\n";
    $model_code .= "     */\n";
    $model_code .= "    public static function findById(\$id) {\n";
    
    // Add soft delete condition if enabled
    $soft_delete_condition = '';
    if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
        $soft_delete_condition = " AND deleted_at IS NULL";
    }
    
    $model_code .= "        \$sql = \"SELECT * FROM {$table_name} WHERE {$primary_key} = ? {$soft_delete_condition}\";\n";
    $model_code .= "        \$row = db_get_row(\$sql, [\$id]);\n";
    $model_code .= "        return \$row ? new {$class_name}(\$row) : null;\n";
    $model_code .= "    }\n\n";
    
    // Find all method
    $model_code .= "    /**\n";
    $model_code .= "     * Find all records\n";
    $model_code .= "     * \n";
    $model_code .= "     * @param string \$orderBy Column to order by\n";
    $model_code .= "     * @param string \$direction Sort direction (ASC or DESC)\n";
    $model_code .= "     * @param int \$limit Number of records to return\n";
    $model_code .= "     * @param int \$offset Starting position\n";
    $model_code .= "     * @return array Array of {$class_name} objects\n";
    $model_code .= "     */\n";
    $model_code .= "    public static function findAll(\$orderBy = '{$primary_key}', \$direction = 'ASC', \$limit = null, \$offset = 0) {\n";
    
    // Add soft delete condition if enabled
    $where_clause = '';
    if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
        $where_clause = "WHERE deleted_at IS NULL ";
    }
    
    $model_code .= "        \$sql = \"SELECT * FROM {$table_name} {$where_clause}ORDER BY \$orderBy \$direction\";\n";
    $model_code .= "        \n";
    $model_code .= "        // Add limit and offset if provided\n";
    $model_code .= "        if (\$limit !== null) {\n";
    $model_code .= "            \$sql .= \" LIMIT \$limit OFFSET \$offset\";\n";
    $model_code .= "        }\n";
    $model_code .= "        \n";
    $model_code .= "        \$rows = db_get_rows(\$sql);\n";
    $model_code .= "        \$results = [];\n";
    $model_code .= "        \n";
    $model_code .= "        foreach (\$rows as \$row) {\n";
    $model_code .= "            \$results[] = new {$class_name}(\$row);\n";
    $model_code .= "        }\n";
    $model_code .= "        \n";
    $model_code .= "        return \$results;\n";
    $model_code .= "    }\n\n";
    
    // Add search method if enabled
    if (isset($_SESSION['features']['search']) && $_SESSION['features']['search']) {
        $model_code .= "    /**\n";
        $model_code .= "     * Search records\n";
        $model_code .= "     * \n";
        $model_code .= "     * @param string \$term Search term\n";
        $model_code .= "     * @param array \$fields Fields to search in (empty for all string fields)\n";
        $model_code .= "     * @param string \$orderBy Column to order by\n";
        $model_code .= "     * @param string \$direction Sort direction (ASC or DESC)\n";
        $model_code .= "     * @param int \$limit Number of records to return\n";
        $model_code .= "     * @param int \$offset Starting position\n";
        $model_code .= "     * @return array Array of {$class_name} objects\n";
        $model_code .= "     */\n";
        $model_code .= "    public static function search(\$term, \$fields = [], \$orderBy = '{$primary_key}', \$direction = 'ASC', \$limit = null, \$offset = 0) {\n";
        $model_code .= "        // Determine which fields to search\n";
        $model_code .= "        if (empty(\$fields)) {\n";
        $model_code .= "            // Default to all string-like fields\n";
        $model_code .= "            \$fields = [\n";
        
        // Add all string-like fields
        foreach ($table['fields'] as $field) {
            if (in_array($field['type'], ['varchar', 'text', 'enum'])) {
                $model_code .= "                '{$field['name']}',\n";
            }
        }
        
        $model_code .= "            ];\n";
        $model_code .= "        }\n";
        $model_code .= "        \n";
        $model_code .= "        if (empty(\$fields)) {\n";
        $model_code .= "            return [];  // No searchable fields\n";
        $model_code .= "        }\n";
        $model_code .= "        \n";
        $model_code .= "        // Build WHERE clause\n";
        $model_code .= "        \$where_parts = [];\n";
        $model_code .= "        \$params = [];\n";
        $model_code .= "        \n";
        $model_code .= "        foreach (\$fields as \$field) {\n";
        $model_code .= "            \$where_parts[] = \"\$field LIKE ?\";\n";
        $model_code .= "            \$params[] = \"%\$term%\";\n";
        $model_code .= "        }\n";
        $model_code .= "        \n";
        $model_code .= "        \$where_clause = \"(\" . implode(\" OR \", \$where_parts) . \")\";\n";
        
        // Add soft delete condition if enabled
        if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
            $model_code .= "        \$where_clause .= \" AND deleted_at IS NULL\";\n";
        }
        
        $model_code .= "        \n";
        $model_code .= "        \$sql = \"SELECT * FROM {$table_name} WHERE \$where_clause ORDER BY \$orderBy \$direction\";\n";
        $model_code .= "        \n";
        $model_code .= "        // Add limit and offset if provided\n";
        $model_code .= "        if (\$limit !== null) {\n";
        $model_code .= "            \$sql .= \" LIMIT \$limit OFFSET \$offset\";\n";
        $model_code .= "        }\n";
        $model_code .= "        \n";
        $model_code .= "        \$rows = db_get_rows(\$sql, \$params);\n";
        $model_code .= "        \$results = [];\n";
        $model_code .= "        \n";
        $model_code .= "        foreach (\$rows as \$row) {\n";
        $model_code .= "            \$results[] = new {$class_name}(\$row);\n";
        $model_code .= "        }\n";
        $model_code .= "        \n";
        $model_code .= "        return \$results;\n";
        $model_code .= "    }\n\n";
    }
    
    // Count method
    $model_code .= "    /**\n";
    $model_code .= "     * Count all records\n";
    $model_code .= "     * \n";
    $model_code .= "     * @return int Number of records\n";
    $model_code .= "     */\n";
    $model_code .= "    public static function count() {\n";
    
    // Add soft delete condition if enabled
    $where_clause = '';
    if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
        $where_clause = "WHERE deleted_at IS NULL";
    }
    
    $model_code .= "        \$sql = \"SELECT COUNT(*) as count FROM {$table_name} {$where_clause}\";\n";
    $model_code .= "        \$result = db_get_row(\$sql);\n";
    $model_code .= "        return \$result ? (int)\$result['count'] : 0;\n";
    $model_code .= "    }\n\n";
    
    // Save method
    $model_code .= "    /**\n";
    $model_code .= "     * Save the record (insert or update)\n";
    $model_code .= "     * \n";
    $model_code .= "     * @return bool Success or failure\n";
    $model_code .= "     */\n";
    $model_code .= "    public function save() {\n";
    $model_code .= "        // Check if this is an insert or update\n";
    $model_code .= "        if (isset(\$this->{$primary_key}) && \$this->{$primary_key}) {\n";
    $model_code .= "            return \$this->update();\n";
    $model_code .= "        } else {\n";
    $model_code .= "            return \$this->insert();\n";
    $model_code .= "        }\n";
    $model_code .= "    }\n\n";
    
    // Insert method
    $model_code .= "    /**\n";
    $model_code .= "     * Insert a new record\n";
    $model_code .= "     * \n";
    $model_code .= "     * @return bool Success or failure\n";
    $model_code .= "     */\n";
    $model_code .= "    protected function insert() {\n";
    $model_code .= "        \$data = [];\n";
    
    // Add fields to data array
    foreach ($table['fields'] as $field) {
        $field_name = sanitize_input($field['name']);
        // Skip auto-increment primary key
        if ($field_name === $primary_key && isset($field['auto_increment']) && $field['auto_increment']) {
            continue;
        }
        $model_code .= "        if (isset(\$this->{$field_name})) {\n";
        $model_code .= "            \$data['{$field_name}'] = \$this->{$field_name};\n";
        $model_code .= "        }\n";
    }
    
    // Add audit trail fields if enabled
    if (isset($_SESSION['features']['audit']) && $_SESSION['features']['audit']) {
        $model_code .= "        // Set audit fields\n";
        $model_code .= "        \$data['created_at'] = date('Y-m-d H:i:s');\n";
        $model_code .= "        \$data['updated_at'] = date('Y-m-d H:i:s');\n";
        $model_code .= "        \n";
        $model_code .= "        // Set user ID if available\n";
        $model_code .= "        if (isset(\$_SESSION['user_id'])) {\n";
        $model_code .= "            \$data['created_by'] = \$_SESSION['user_id'];\n";
        $model_code .= "            \$data['updated_by'] = \$_SESSION['user_id'];\n";
        $model_code .= "        }\n";
    }
    
    $model_code .= "        \n";
    $model_code .= "        \$id = db_insert('{$table_name}', \$data);\n";
    $model_code .= "        \n";
    $model_code .= "        if (\$id) {\n";
    $model_code .= "            \$this->{$primary_key} = \$id;\n";
    $model_code .= "            return true;\n";
    $model_code .= "        }\n";
    $model_code .= "        \n";
    $model_code .= "        return false;\n";
    $model_code .= "    }\n\n";
    
    // Update method
    $model_code .= "    /**\n";
    $model_code .= "     * Update an existing record\n";
    $model_code .= "     * \n";
    $model_code .= "     * @return bool Success or failure\n";
    $model_code .= "     */\n";
    $model_code .= "    protected function update() {\n";
    $model_code .= "        \$data = [];\n";
    
    // Add fields to data array
    foreach ($table['fields'] as $field) {
        $field_name = sanitize_input($field['name']);
        // Skip primary key for update
        if ($field_name === $primary_key) {
            continue;
        }
        $model_code .= "        if (isset(\$this->{$field_name})) {\n";
        $model_code .= "            \$data['{$field_name}'] = \$this->{$field_name};\n";
        $model_code .= "        }\n";
    }
    
    // Add audit trail fields if enabled
    if (isset($_SESSION['features']['audit']) && $_SESSION['features']['audit']) {
        $model_code .= "        // Update audit fields\n";
        $model_code .= "        \$data['updated_at'] = date('Y-m-d H:i:s');\n";
        $model_code .= "        \n";
        $model_code .= "        // Set user ID if available\n";
        $model_code .= "        if (isset(\$_SESSION['user_id'])) {\n";
        $model_code .= "            \$data['updated_by'] = \$_SESSION['user_id'];\n";
        $model_code .= "        }\n";
    }
    
    $model_code .= "        \n";
    $model_code .= "        return db_update('{$table_name}', \$data, ['{$primary_key}' => \$this->{$primary_key}]);\n";
    $model_code .= "    }\n\n";
    
    // Delete method
    $model_code .= "    /**\n";
    $model_code .= "     * Delete the record\n";
    $model_code .= "     * \n";
    $model_code .= "     * @param bool \$force Force delete even with soft delete enabled\n";
    $model_code .= "     * @return bool Success or failure\n";
    $model_code .= "     */\n";
    $model_code .= "    public function delete(\$force = false) {\n";
    
    // Add soft delete if enabled
    if (isset($_SESSION['features']['soft_delete']) && $_SESSION['features']['soft_delete']) {
        $model_code .= "        // Use soft delete unless force is true\n";
        $model_code .= "        if (!\$force) {\n";
        $model_code .= "            \$data = ['deleted_at' => date('Y-m-d H:i:s')];\n";
        $model_code .= "            return db_update('{$table_name}', \$data, ['{$primary_key}' => \$this->{$primary_key}]);\n";
        $model_code .= "        }\n";
    }
    
    $model_code .= "        return db_delete('{$table_name}', ['{$primary_key}' => \$this->{$primary_key}]);\n";
    $model_code .= "    }\n";
    
    // Close class
    $model_code .= "}\n?>";
    
    return $model_code;
}
?>